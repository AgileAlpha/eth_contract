defmodule EthContract.HttpClientMock do
  import EthContract.Util

  @address "0xC0BB964A7e51393e7F89c5513eAadbE5208Dec89"

  def eth_call(%{ to: _to, data: data }) do
    {:ok, balance_of_sig } = balance_of_hex(@address)

    cond do
      data == "0x" <> owner_of_hex(1)             -> {:ok, owner_of() }
      data == "0x" <> balance_of_sig              -> {:ok, "0x" <> balance_of() }
      data == "0x" <> total_supply_hex()          -> {:ok, total_supply() }
      data == "0x" <> meta_for_hex(1, "getKitty") -> {:ok, meta()}
    end
  end

  defp owner_of do
    "0x00000000000000000000000079bd592415ff6c91cfe69a7f9cd091354fc65a18"
  end

  defp balance_of do
    "0000000000000000000000000000000000000000000000000000000000000003"
  end

  defp total_supply do
    "0x00000000000000000000000000000000000000000000000000000000000cc7b3"
  end

  # %{ token_id: 1, method: "getKitty", contract: "0x06012c8cf97bead5deae237070f9587f8e7a266d", abi: abi }
  defp meta do
    "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005a16688f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ad2b318e6724ce4b9290146531884721ad18c63298a5308a55ad6b6b58d"
  end
end
